{
  "Name": "Content filter profile - test Max length TA-1284",
  "Skip": false,
  "Tests": [
    {
      "Name": "Headers: Max length field validations",
      "Skip": false,
      "Steps": [
        {
          "Name": "Headers: Max length field empty",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"header_field_empty_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"header_field_empty_max_length\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": \"\",\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n'' is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['headers']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['headers']['max_length']:\\n    ''\""
          }
        },
        {
          "Name": "Headers: Max length field zero",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"header_field_zero_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"header-field-zero-max-length\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 0,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n0 is less than the minimum of 1\\n\\nFailed validating 'minimum' in schema['properties']['headers']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['headers']['max_length']:\\n    0\""
          }
        },
        {
          "Name": "Headers: Max length field negative number",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"header_field_negative_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"header_field_negative_max_length\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": -5,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n-5 is less than the minimum of 1\\n\\nFailed validating 'minimum' in schema['properties']['headers']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['headers']['max_length']:\\n    -5\""
          }
        },
        {
          "Name": "Headers: Max length field decimal number",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"header_field_decimal_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"header_field_decimal_max_length\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 3.5,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n3.5 is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['headers']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['headers']['max_length']:\\n    3.5\""
          }
        },
        {
          "Name": "Headers: Max length field text",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"header_field_text_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"header_field_text_max_length\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": \"text\",\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n'text' is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['headers']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['headers']['max_length']:\\n    'text'\""
          }
        }
      ]
    },
    {
      "Name": "Cookies: Max length field validations",
      "Skip": false,
      "Steps": [
        {
          "Name": "Cookies: Max length field empty",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookie_field_empty_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"cookie_field_empty_max_length\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": \"\",\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n'' is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['cookies']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['cookies']['max_length']:\\n    ''\""
          }
        },
        {
          "Name": "Cookies: Max length field zero",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookie_field_zero_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"cookie_field_zero_max_length\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 0,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n0 is less than the minimum of 1\\n\\nFailed validating 'minimum' in schema['properties']['cookies']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['cookies']['max_length']:\\n    0\""
          }
        },
        {
          "Name": "Cookies: Max length field negative number",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookie_field_negative_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"cookie_field_negative_max_length\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": -5,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n-5 is less than the minimum of 1\\n\\nFailed validating 'minimum' in schema['properties']['cookies']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['cookies']['max_length']:\\n    -5\""
          }
        },
        {
          "Name": "Cookies: Max length field decimal number",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookie_field_decimal_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"cookie_field_decimal_max_length\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 3.5,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n3.5 is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['cookies']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['cookies']['max_length']:\\n    3.5\""
          }
        },
        {
          "Name": "Cookies: Max length field text",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookie_field_text_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"cookie_field_text_max_length\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": \"text\",\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n'text' is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['cookies']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['cookies']['max_length']:\\n    'text'\""
          }
        }
      ]
    },
    {
      "Name": "Arguments: Max length field validations",
      "Skip": false,
      "Steps": [
        {
          "Name": "Arguments: Max length field empty",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"argument_field_empty_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"argument_field_empty_max_length\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": \"\",\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n'' is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['args']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['args']['max_length']:\\n    ''\""
          }
        },
        {
          "Name": "Arguments: Max length field zero",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"argument_field_zero_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"argument_field_zero_max_length\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 0,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n0 is less than the minimum of 1\\n\\nFailed validating 'minimum' in schema['properties']['args']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['args']['max_length']:\\n    0\""
          }
        },
        {
          "Name": "Arguments: Max length field negative number",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"argument_field_negative_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"argument_field_negative_max_length\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": -5,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n-5 is less than the minimum of 1\\n\\nFailed validating 'minimum' in schema['properties']['args']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['args']['max_length']:\\n    -5\""
          }
        },
        {
          "Name": "Arguments: Max length field decimal number",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"argument_field_decimal_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"argument_field_decimal_max_length\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 3.5,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n3.5 is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['args']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['args']['max_length']:\\n    3.5\""
          }
        },
        {
          "Name": "Arguments: Max length field text",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"argument_field_text_max_length\""
              },
              {
                "Key": "name",
                "Value": "\"argument_field_text_max_length\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": \"text\",\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              }
            ]
          },
          "Expected": {
            "Code": "400",
            "Type": "content",
            "Single": false,
            "Text": "b\"schema mismatched: \\n'text' is not of type 'integer'\\n\\nFailed validating 'type' in schema['properties']['args']['properties']['max_length']:\\n    {'description': 'Max length of characters allowed for each item of the '\\n                    'section type in the request',\\n     'minimum': 1,\\n     'title': 'Max Length',\\n     'type': 'integer'}\\n\\nOn instance['args']['max_length']:\\n    'text'\""
          }
        }
      ]
    },
    {
      "Name": "Create content filter profiles",
      "Skip": false,
      "Steps": [
        {
          "Name": "Create content filter with Headers: Max length 60. Enable toggle on.",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"headers-field-max-length-toggle-on\""
              },
              {
                "Key": "name",
                "Value": "\"headers-field-max-length-toggle-on\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 41,\"enable_max_count\": true,\"max_length\": 60,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create content filter with Headers: Max length 60. Enable toggle off.",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"headers-field-max-length-toggle-off\""
              },
              {
                "Key": "name",
                "Value": "\"headers-field-max-length-toggle-off\""
              },
              {
                "Key": "headers",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 41,\"enable_max_count\": true,\"max_length\": 60,\"enable_max_length\": false}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create content filter with Cookies: Max length 4. Enable toggle on.",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookies-field-max-length-toggle-on\""
              },
              {
                "Key": "name",
                "Value": "\"cookies-field-max-length-toggle-on\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 41,\"enable_max_count\": true,\"max_length\": 4,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create content filter with Cookies: Max length 4. Enable toggle off.",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"cookies-field-max-length-toggle-off\""
              },
              {
                "Key": "name",
                "Value": "\"cookies-field-max-length-toggle-off\""
              },
              {
                "Key": "cookies",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 4,\"enable_max_count\": true,\"max_length\": 4,\"enable_max_length\": false}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create content filter with Arguments: Max length 4. Enable toggle on.",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"arguments-field-max-length-toggle-on\""
              },
              {
                "Key": "name",
                "Value": "\"arguments-field-max-length-toggle-on\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 41,\"enable_max_count\": true,\"max_length\": 4,\"enable_max_length\": true}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create content filter with Arguments: Max length 4. Enable toggle off.",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"arguments-field-max-length-toggle-off\""
              },
              {
                "Key": "name",
                "Value": "\"arguments_field_max_length_toggle_off\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 4,\"enable_max_count\": true,\"max_length\": 4,\"enable_max_length\": false}"
              },
              {
                "Key": "tags",
                "Value": "[\"content-filter-test\"]"
              },
              {
                "Key": "action",
                "Value": "\"action-contentfilter-block\""
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create Content Filter Profile with Max length 3000000 bytes",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"content-filter-profile-big-limit\""
              },
              {
                "Key": "name",
                "Value": "\"Content Filter Profile Big Limit\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 3000000,\"enable_max_length\": true}"
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        }
      ]
    },
    {
      "Name": "Setup proxy template and server group",
      "Skip": false,
      "Steps": [
        {
          "Name": "Create Proxy Template with Max body size 150MB",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "proxy-template",
            "Path": "proxy-template-big-limit/"
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "name",
                "Value": "\"Proxy Template Big Limit\""
              },
              {
                "Key": "id",
                "Value": "\"proxy-template-big-limit\""
              },
              {
                "Key": "client_max_body_size",
                "Value": "150"
              }
            ]
          },
          "Expected": {
            "Code": "201",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "id",
                "Value": "proxy-template-big-limit"
              }
            ]
          }
        },
        {
          "Name": "Step: User can create security policy `test-sp`",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "security-policy",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"test-sp\""
              },
              {
                "Key": "name",
                "Value": "\"test-sp\""
              },
              {
                "Key": "map",
                "Value": "[\n{\n\"id\":\"__default_entry__\",\n\"match\":\"/\",\n\"name\":\"default\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"__defaultcontentfilter__\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":false,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\n\"id\":\"15dd3e1631d9\",\n\"match\":\"/headers-field-max-length-toggle-on\",\n\"name\":\"headers-field-max-length-toggle-on\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"headers-field-max-length-toggle-on\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":true,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\n\"id\":\"6b5c721b2464\",\n\"match\":\"/headers-field-max-length-toggle-off\",\n\"name\":\"headers-field-max-length-toggle-off\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"headers-field-max-length-toggle-off\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":true,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\n\"id\":\"9613e22526fa\",\n\"match\":\"/cookies-field-max-length-toggle-on\",\n\"name\":\"cookies-field-max-length-toggle-on\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"cookies-field-max-length-toggle-on\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":true,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\n\"id\":\"fd87dbe8bd92\",\n\"match\":\"/cookies-field-max-length-toggle-off\",\n\"name\":\"cookies-field-max-length-toggle-off\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"cookies-field-max-length-toggle-off\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":true,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\n\"id\":\"f986a822004c\",\n\"match\":\"/arguments-field-max-length-toggle-on\",\n\"name\":\"arguments-field-max-length-toggle-on\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"arguments-field-max-length-toggle-on\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":true,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\n\"id\":\"1662dbca4311\",\n\"match\":\"/arguments_field_max_length_toggle_off\",\n\"name\":\"arguments_field_max_length_toggle_off\",\n\"acl_profile\":\"__acldefault__\",\n\"content_filter_profile\":\"arguments_field_max_length_toggle_off\",\n\"backend_id\":\"__default__\",\n\"acl_active\":false,\n\"content_filter_active\":true,\n\"limit_ids\":[],\n\"cloud_functions\":[]\n},\n{\"id\":\"test\",\"match\":\"/test\",\"name\":\"test\",\"acl_profile\":\"__acldefault__\",\"content_filter_profile\":\"content-filter-profile-big-limit\",\"backend_id\":\"__default__\",\"acl_active\":false,\"content_filter_active\":true,\"limit_ids\":[],\"cloud_functions\":[]}]"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create server group 'test.site' with proxy template 'proxy-template-big-limit' and security policy 'test-sp' ",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "server-group",
            "Path": "test-site/"
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"test-site\""
              },
              {
                "Key": "name",
                "Value": "\"test-site\""
              },
              {
                "Key": "server_names",
                "Value": "[\"test.site\"]"
              },
              {
                "Key": "security_policy",
                "Value": "\"test-sp\""
              },
              {
                "Key": "proxy_template",
                "Value": "\"proxy-template-big-limit\""
              }
            ]
          },
          "Expected": {
            "Code": "201",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "id",
                "Value": "test-site"
              }
            ]
          }
        },
        {
          "ID": "publish-changes",
          "Skip": false
        },
        {
          "ID": "wait-for-publish",
          "Skip": false
        }
      ]
    },
    {
      "Name": "Send requests",
      "Skip": false,
      "Steps": [
        {
          "Name": "Send request Headers length less than 60 characters",
          "API": {
            "Base": "send-traffic",
            "Path": "/headers-field-max-length-toggle-on"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "test",
              "Value": "qFTuLBoYDxvEplgJhXnKfZScmOaNPQrwHzRVtjAdCeIsyGUE4aBv"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Headers length equals 60 characters",
          "API": {
            "Base": "send-traffic",
            "Path": "/headers-field-max-length-toggle-on"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "test",
              "Value": "testqFTuLBoYDxvEplgJhXnKfZScmOaNPQrwHzRVtjAdCeIsyGUE4aBvR123"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Headers length greater than 60 characters",
          "API": {
            "Base": "send-traffic",
            "Path": "/headers-field-max-length-toggle-on"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "test",
              "Value": "testqFTuLBoYDxvEplgJhXnKfZScmOaNPQrwHzRVtjAdCeIsyGUE4aBvRcsdfs"
            }
          ],
          "Expected": {
            "Code": "473",
            "Type": "content",
            "Single": false,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Headers - enable toggle off",
          "API": {
            "Base": "send-traffic",
            "Path": "/headers-field-max-length-toggle-off"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "test",
              "Value": "qFTuLBoYDxvEplgJhXnKfZScmOaNPQrwHzRVtjAdCeIsyGUE4aBvRKhdbshh"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Cookies: Max length less than 4. Enable toggle on.",
          "API": {
            "Base": "send-traffic",
            "Path": "/cookies-field-max-length-toggle-on"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "Cookie",
              "Value": "foo=bo"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Cookies: Max length equals 4. Enable toggle on.",
          "API": {
            "Base": "send-traffic",
            "Path": "/cookies-field-max-length-toggle-on"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "Cookie",
              "Value": "foo=book"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Cookies: Max length greater than 4. Enable toggle on.",
          "API": {
            "Base": "send-traffic",
            "Path": "/cookies-field-max-length-toggle-on"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "Cookie",
              "Value": "foo=boook"
            }
          ],
          "Expected": {
            "Code": "473",
            "Type": "content",
            "Single": false,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Cookies - enable toggle off",
          "API": {
            "Base": "send-traffic",
            "Path": "/cookies-field-max-length-toggle-off"
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            },
            {
              "Key": "Cookie",
              "Value": "foo=boook"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Arguments: Max length less than 4. Enable toggle on.",
          "API": {
            "Base": "send-traffic",
            "Path": "/arguments-field-max-length-toggle-on"
          },
          "Method": "POST",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            }
          ],
          "Arguments": [
            {
              "Key": "arg",
              "Value": "1"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Arguments: Max length equals 4. Enable toggle on.",
          "API": {
            "Base": "send-traffic",
            "Path": "/arguments-field-max-length-toggle-on"
          },
          "Method": "POST",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            }
          ],
          "Arguments": [
            {
              "Key": "arg",
              "Value": "1234"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Arguments: Max length greater than 4. Enable toggle on.",
          "API": {
            "Base": "send-traffic",
            "Path": "/arguments-field-max-length-toggle-on"
          },
          "Method": "POST",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            }
          ],
          "Arguments": [
            {
              "Key": "arg",
              "Value": "12345"
            }
          ],
          "Expected": {
            "Code": "473",
            "Type": "content",
            "Single": false,
            "Text": "b''"
          }
        },
        {
          "Name": "Send request Arguments - enable toggle off",
          "API": {
            "Base": "send-traffic",
            "Path": "/arguments_field_max_length_toggle_off"
          },
          "Method": "POST",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            }
          ],
          "Arguments": [
            {
              "Key": "arg",
              "Value": "12345"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        },
        {
          "Name": "Send requests with arguments of 2.1MB",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "send-traffic",
            "Path": "/test"
          },
          "Method": "POST",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test.site"
            }
          ],
          "Files": [
            {
              "Key": "file1",
              "Value": "./test_files/2.1mb-file.txt"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "content",
            "Single": true,
            "Text": "b''"
          }
        }
      ]
    },
    {
      "Name": "Assert logs",
      "Skip": false,
      "Steps": [
        {
          "ID": "wait-for-logs",
          "Skip": false
        },
        {
          "Name": "Get Logs for `473` code and path=/headers-field-max-length-toggle-on",
          "Skip": false,
          "API": {
            "Base": "logs",
            "Path": ""
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "syntax",
              "Value": "string_query"
            }
          ],
          "Arguments": [
            {
              "Key": "filters",
              "Value": "status = 473, path=\"/headers-field-max-length-toggle-on\", timestamp between @@NOW(-3minutes)@@ and @@NOW(+2minutes)@@, branch=@@branch@@"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "jsonpath",
            "Single": true,
            "Headers": [
              {
                "Key": "Server",
                "Value": "rhino-core-shield"
              }
            ],
            "SingleResult": [
              {
                "Key": "data/results/0/tags/*",
                "Value": "contentfiltername:headers-field-max-length-toggle-on"
              }
            ]
          }
        },
        {
          "Name": "Get Logs for `473` code and path=/cookies-field-max-length-toggle-on",
          "Skip": false,
          "API": {
            "Base": "logs",
            "Path": ""
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "syntax",
              "Value": "string_query"
            }
          ],
          "Arguments": [
            {
              "Key": "filters",
              "Value": "status = 473, path=\"/cookies-field-max-length-toggle-on\", timestamp between @@NOW(-3minutes)@@ and @@NOW(+2minutes)@@, branch=@@branch@@"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "jsonpath",
            "Single": true,
            "Headers": [
              {
                "Key": "Server",
                "Value": "rhino-core-shield"
              }
            ],
            "SingleResult": [
              {
                "Key": "data/results/0/tags/*",
                "Value": "contentfiltername:cookies-field-max-length-toggle-on"
              }
            ]
          }
        },
        {
          "Name": "Get Logs for `473` code and path=/arguments-field-max-length-toggle-on",
          "Skip": false,
          "API": {
            "Base": "logs",
            "Path": ""
          },
          "Method": "GET",
          "Headers": [
            {
              "Key": "syntax",
              "Value": "string_query"
            }
          ],
          "Arguments": [
            {
              "Key": "filters",
              "Value": "status = 473, path=\"/arguments-field-max-length-toggle-on\", timestamp between @@NOW(-3minutes)@@ and @@NOW(+2minutes)@@, branch=@@branch@@"
            }
          ],
          "Expected": {
            "Code": "200",
            "Type": "jsonpath",
            "Single": true,
            "Headers": [
              {
                "Key": "Server",
                "Value": "rhino-core-shield"
              }
            ],
            "SingleResult": [
              {
                "Key": "data/results/0/tags/*",
                "Value": "contentfiltername:arguments-field-max-length-toggle-on"
              }
            ]
          }
        }
      ]
    },
    {
      "Name": "Proxy template - Max body limit in proxy template smaller than in content filter profile",
      "Skip": false,
      "Steps": [
        {
          "Name": "Create Content Filter Profile with Max length 3000000 bytes",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "content-filter-profile",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"content_filter_profile_small_limit\""
              },
              {
                "Key": "name",
                "Value": "\"Content Filter Profile Small Limit\""
              },
              {
                "Key": "args",
                "Value": "{\"names\": [],\"regex\": [],\"max_count\": 1024,\"enable_max_count\": true,\"max_length\": 3000000,\"enable_max_length\": true}"
              },
              {
                "Key": "ignore_body",
                "Value": "false"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Create Proxy Template with Max body size 2MB",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "proxy-template",
            "Path": "proxy-template-small-limit/"
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "name",
                "Value": "\"Proxy Template Small Limit\""
              },
              {
                "Key": "id",
                "Value": "\"proxy-template-small-limit\""
              },
              {
                "Key": "client_max_body_size",
                "Value": "2"
              }
            ]
          },
          "Expected": {
            "Code": "201",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "id",
                "Value": "proxy-template-small-limit"
              }
            ]
          }
        },
        {
          "Name": "Step: User can create security policy `test-sp-small-limit`",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "security-policy",
            "Path": ""
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"test-sp-small-limit\""
              },
              {
                "Key": "name",
                "Value": "\"test-sp-small-limit\""
              },
              {
                "Key": "map",
                "Value": "[{\"id\":\"__default_entry__\",\"match\":\"/\",\"name\":\"default\",\"acl_profile\":\"__acldefault__\",\"content_filter_profile\":\"__defaultcontentfilter__\",\"backend_id\":\"__default__\",\"acl_active\":false,\"content_filter_active\":false,\"limit_ids\":[],\"cloud_functions\":[]},{\"id\":\"test\",\"match\":\"/test\",\"name\":\"test\",\"acl_profile\":\"__acldefault__\",\"content_filter_profile\":\"content_filter_profile_small_limit\",\"backend_id\":\"__default__\",\"acl_active\":false,\"content_filter_active\":true,\"limit_ids\":[],\"cloud_functions\":[]}]"
              }
            ]
          },
          "Expected": {
            "Code": "200",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "ok",
                "Value": true
              }
            ]
          }
        },
        {
          "Name": "Add Proxy Template: 'proxy-template-small-limit' to 'test-site-small-limit.site' ",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "server-group",
            "Path": "test-site-small-limit/"
          },
          "Method": "POST",
          "Payload": {
            "Params": [
              {
                "Key": "id",
                "Value": "\"test-site-small-limit\""
              },
              {
                "Key": "name",
                "Value": "\"test-site-small-limit\""
              },
              {
                "Key": "server_names",
                "Value": "[\"test-site-small-limit.site\"]"
              },
              {
                "Key": "security_policy",
                "Value": "\"test-sp-small-limit\""
              },
              {
                "Key": "proxy_template",
                "Value": "\"proxy-template-small-limit\""
              }
            ]
          },
          "Expected": {
            "Code": "201",
            "Type": "json",
            "Single": true,
            "SingleResult": [
              {
                "Key": "id",
                "Value": "test-site-small-limit"
              }
            ]
          }
        },
        {
          "ID": "publish-changes",
          "Skip": false
        },
        {
          "ID": "wait-for-publish",
          "Skip": false
        },
        {
          "Name": "Send requests with arguments of 2.1MB",
          "Skip": false,
          "GenerateID": false,
          "API": {
            "Base": "send-traffic",
            "Path": "/test"
          },
          "Method": "POST",
          "Headers": [
            {
              "Key": "Host",
              "Value": "test-site-small-limit.site"
            }
          ],
          "Files": [
            {
              "Key": "file1",
              "Value": "./test_files/2.1mb-file.txt"
            }
          ],
          "Expected": {
            "Code": "413",
            "Type": "status-code"
          }
        }
      ]
    }
  ]
}