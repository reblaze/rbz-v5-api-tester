{
    "Name": "Playground Test Suite",
    "Skip": false,
    "Tests": 
    [
        {
            "Name": "My Test",
            "Skip": false,
            "Steps":
            [
                {
                    "ID": "add-my-ip-to-trusted-source",
                    "Skip": false
                },
                {
                    "Name": "Create Rate limit with Name: 'My rate limit'",
                    "Skip": false,
                    "GenerateID": false,
                    "API": 
                    {
                        "Base": "rate-limit",
                        "Path": ""
                    },
                    "Method" :"POST",
                    "Payload":
                    {
                        "Params":
                        [
                            {
                                "Key": "name",
                                "Value": "\"My rate limit\""
                            },
                            {
                                "Key": "id",
                                "Value": "\"api_tester_cccbbbaaa\""
                            },
                            {
                                "Key": "active",
                                "Value": "true"
                            },
                            {
                                "Key": "threshold",
                                "Value": "1"
                            }
                        ]
                    },
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "json",
						"Single": true,
                        "SingleResult":
                        [
                            {
                                "Key": "ok",
                                "Value": true
                            }
                        ]
                    }
                },
                {
                    "Name": "Add Rate limit with Name: 'My rate limit' to default Security policy",
                    "Skip": false,
                    "GenerateID": false,
                    "API": 
                    {
                        "Base": "security-policy",
                        "Path": "__default__/"
                    },
                    "Method" :"PUT",
                    "Payload":
                    {
                        "Params":
                        [
                            {
                                "Key": "id",
                                "Value": "\"__default__\""
                            },
                            {
                                "Key": "map",
                                "Value": "[{\"id\": \"__root_entry__\", \"name\": \"__root__\", \"match\": \"^/(\\\\W.*)?$\", \"acl_profile\": \"__acldefault__\", \"acl_active\": true, \"backend_id\": \"__default__\", \"cloud_functions\": [], \"content_filter_profile\": \"__defaultcontentfilter__\", \"content_filter_active\": true, \"limit_ids\": []},{ \"id\": \"__default_entry__\", \"name\": \"__default__\", \"match\": \"/\", \"acl_profile\": \"__acldefault__\", \"acl_active\": true, \"backend_id\": \"__default__\", \"cloud_functions\": [], \"content_filter_profile\": \"__defaultcontentfilter__\", \"content_filter_active\": true, \"limit_ids\": [\"api_tester_cccbbbaaa\"]}]"
                            }
                        ]
                    },
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "json",
						"Single": true,
                        "SingleResult":
                        [
                            {
                                "Key": "ok",
                                "Value": true
                            }
                        ]
                    }
                },
                {
                    "Name": "List rate limits",
                    "Skip": false,
                    "GenerateID": false,
                    "API": 
                    {
                        "Base": "rate-limits",
                        "Path": ""
                    },
                    "Method" :"GET",
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "json",
						"Single": false,
                        "MultipleResults":
                        [
                            [
                                {
                                    "Key": "name",
                                    "Value": "My rate limit"
                                },
                                {
                                    "Key": "id",
                                    "Value": "api_tester_cccbbbaaa"
                                }
                            ],
                            [
                                {
                                    "Key": "name",
                                    "Value": "global rate limit asn per host+path 10k/60"
                                },
                                {
                                    "Key": "id",
                                    "Value": "rl-asn-path-ddos"
                                }
                            ]
                        ]
                    }
                },
                {
                    "ID": "publish-changes",
                    "Skip": false
                },
                {
                    "ID": "wait-for-publish",
                    "Skip": false
                },
                {
                    "Name": "Send Traffic using GET method",
                    "Skip": false,
                    "API": 
                    {
                        "Base": "send-traffic",
                        "Path": ""
                    },
                    "Method": "GET",
                    "Headers":
                    [
                        {
                            "Key": "Host",
                            "Value": "default.site"
                        },
                        {
                            "Key": "test",
                            "Value": "366"
                        },
                        {
                            "Key": "Cookie",
                            "Value": "test=my-cookie"
                        }
                    ],
                    "Arguments":
                    [
                        {
                            "Key": "arg1",
                            "Value": "my first arg"
                        },
                        {
                            "Key": "arg2",
                            "Value": "my second arg"
                        },
                        {
                            "Key": "arg3",
                            "Value": "long arg aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                        }
                    ],
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "content",
						"Single": true,
                        "Text": "b''"
                    }
                },
                {
                    "Name": "Send Traffic using POST method",
                    "Skip": false,
                    "API": 
                    {
                        "Base": "send-traffic",
                        "Path": "my-test"
                    },
                    "Method": "POST",
                    "Headers":
                    [
                        {
                            "Key": "Host",
                            "Value": "default.site"
                        },
                        {
                            "Key": "test",
                            "Value": "366"
                        },
                        {
                            "Key": "Cookie",
                            "Value": "test=my-cookie"
                        }
                    ],
                    "Arguments":
                    [
                        {
                            "Key": "arg1",
                            "Value": "my first arg"
                        },
                        {
                            "Key": "arg2",
                            "Value": "my second arg"
                        },
                        {
                            "Key": "arg3",
                            "Value": "long arg aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                        }
                    ],
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "content",
						"Single": true,
                        "Text": "b''"
                    }
                },
                {
                    "Name": "Send Traffic using PUT method",
                    "Skip": false,
                    "API": 
                    {
                        "Base": "send-traffic",
                        "Path": ""
                    },
                    "Method": "PUT",
                    "Headers":
                    [
                        {
                            "Key": "Host",
                            "Value": "default.site"
                        },
                        {
                            "Key": "test",
                            "Value": "366"
                        },
                        {
                            "Key": "Cookie",
                            "Value": "test=my-cookie"
                        }
                    ],
                    "Arguments":
                    [
                        {
                            "Key": "arg1",
                            "Value": "my first arg"
                        },
                        {
                            "Key": "arg2",
                            "Value": "my second arg"
                        },
                        {
                            "Key": "arg3",
                            "Value": "long arg aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                        }
                    ],
                    "Files":
                    [
                        {
                            "Key": "file1",
                            "Value": "./test_files/1.png"
                        },
                        {
                            "Key": "file2",
                            "Value": "./test_files/2.png"
                        }
                    ],
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "content",
						"Single": true,
                        "Text": "b''"
                    }
                },
                {
                    "Name": "Send Traffic using DELETE method",
                    "Skip": false,
                    "API": 
                    {
                        "Base": "send-traffic",
                        "Path": "my-test-2"
                    },
                    "Method": "DELETE",
                    "Headers":
                    [
                        {
                            "Key": "Host",
                            "Value": "default.site"
                        },
                        {
                            "Key": "test",
                            "Value": "366"
                        },
                        {
                            "Key": "Cookie",
                            "Value": "test=my-cookie"
                        }
                    ],
                    "Arguments":
                    [
                        {
                            "Key": "arg1",
                            "Value": "my first arg @@ip@@"
                        },
                        {
                            "Key": "arg2",
                            "Value": "my second arg"
                        },
                        {
                            "Key": "arg3",
                            "Value": "long arg aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                        }
                    ],
                    "Expected":
                    {
                        "Code": "471",
                        "Type": "content",
						"Single": true,
                        "Text": "b'access denied'"
                    }
                },
                {
                    "ID": "wait-for-logs",
                    "Skip": false
                },
                {
                    "Name": "Get Logs",
                    "Skip": false,
                    "API": 
                    {
                        "Base": "logs",
                        "Path": ""
                    },
                    "Method": "GET",
                    "Headers":
                    [
                        {
                            "Key": "syntax",
                            "Value": "string_query"
                        }
                    ],
                    "Arguments":
                    [
                        {
                            "Key": "limit",
                            "Value": "200"
                        },
                        {
                            "Key": "filters",
                            "Value": "path=\"/my-test-2\", timestamp between @@NOW(-1minutes)@@ and @@NOW(+1minutes)@@, branch=@@branch@@"
                        }
                    ],
                    "Expected":
                    {
                        "Code": "200",
                        "Type": "jsonpath",
						"Single": true,
                        "Headers":
                        [
                            {
                                "Key": "Server",
                                "Value": "rhino-core-shield"
                            }
                        ],
                        "SingleResult":
                        [
                            {
                                "Key": "data/results/0/tags/*",
                                "Value": "args:3"
                            },
                            {
                                "Key": "data/results/0/gf_triggers/0/trigger_name",
                                "Value": "API Discovery"
                            },
                            {
                                "Key": "data/results/0/gf_triggers/0/action",
                                "Value": "monitor"
                            }
                        ]
                    }
                },
                {
                    "Name": "run command on proxy pod",
                    "Skip": false,
                    "Type": "kubernetes",
                    "Arguments":
                    [
                        {
                            "Key": "container",
                            "Value": "curieproxy"
                        },
                        {
                            "Key": "pod",
                            "Value": ".*-proxy-@@branch@@-.*"
                        },
                        {
                            "Key": "cluster",
                            "Value": "data"
                        },
                        {
                            "Key": "operation",
                            "Value": "run"
                        },
                        {
                            "Key": "command",
                            "Value": "nginx -T > ~/res-nginx-t.txt"
                        }                        
                    ]
                },
                {
                    "Name": "copy file from proxy pod",
                    "Skip": false,
                    "Type": "kubernetes",
                    "Arguments":
                    [
                        {
                            "Key": "container",
                            "Value": "curieproxy"
                        },
                        {
                            "Key": "pod",
                            "Value": ".*-proxy-@@branch@@-.*"
                        },
                        {
                            "Key": "cluster",
                            "Value": "data"
                        },
                        {
                            "Key": "operation",
                            "Value": "copy"
                        },
                        {
                            "Key": "source",
                            "Value": "/root/res-nginx-t.txt"
                        },
                        {
                            "Key": "destination",
                            "Value": "./test_files/res-nginx-t.txt"
                        }                        
                    ]
                },
                {
                    "Name": "check that client_body_timeout value is 30 in copied file",
                    "Skip": false,
                    "Type": "python",
                    "Code": [
                        "import re",
                        "try:",
                        "   filename = './test_files/res-nginx-t.txt'",
                        "   with open(filename, 'r') as file:",
                        "       for line in file:",
                        "           pattern = r'^\\s*client_body_timeout\\s+30;$'",
                        "           match = re.match(pattern, line)",
                        "           if match:",
                        "               print(f'Line found: {line}')",
                        "               exit(0)",
                        "   print(f'regex: {pattern} not found in: {filename}')",
                        "   exit(1)",
                        "except FileNotFoundError:",
                        "   print(f'Error: File: {filename} not found')",
                        "   exit(1)"
                    ]
                }
            ]
        }
    ]
}

